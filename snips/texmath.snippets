# Heavily inspired by:
# https://castel.dev/post/lecture-notes-1/

snippet mk "inline math" w
\\(${1:${VISUAL}}\\)
endsnippet

snippet dm "math block" w
\\[
	$1
\\]
endsnippet

snippet sub "subscript" i
_\{$1\}
endsnippet

snippet sup "superscript" i
^\{$1\}
endsnippet

snippet sqrt "square root" i
\\sqrt\{$1\}
endsnippet

snippet "(\d|\w)root" "n-th root" rw
\\sqrt[`!p snip.rv = match.group(1)`]\{$1\}
endsnippet

snippet "((\(\))|(\[\])|({}))d" "dynamic brackets" rw
\\left`!p snip.rv = ('\\' if match.group(1)[0] == '{' else '') + match.group(1)[0]` ${1:${VISUAL}} \\right`!p snip.rv = ('\\' if match.group(1)[1] == '}' else '') + match.group(1)[1]`
endsnippet

snippet abs "dynamic abs" w
\left\lvert $1 \right\rvert
endsnippet

snippet // "fraction" i
\\frac\{${1:${VISUAL}}\}\{$2\}
endsnippet

snippet "^.*\)/" "dynamic fraction" rw
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')':
		depth += 1
	if stripped[i] == '(':
		depth -= 1
	if depth == 0:
		break;
	i -= 1
snip.rv = stripped[:i] + "\\frac{" + stripped[i+1:-1] + "}"
`\{$1\}$0
endsnippet

snippet lim "limit" i
\\lim_\{${1:x\\to\\infty}\}$2
endsnippet

snippet sum "sum" i
\\sum_\{${1:n=1}\}^\{${2:\\infty}\}$3
endsnippet

snippet int "integral" i
\\int $0
endsnippet

snippet intd "definite integral" i
\\int\\limits_\{$1\}^\{$2\} $0
endsnippet

snippet eval "expression evaluation" i
\\left. $1 \\right|$0
endsnippet

snippet bb "number set" i
\\mathbb\{${1:Q}\}
endsnippet

snippet txt "text equation" i
\\text\{${1:${VISUAL}}\}
endsnippet
